{
  "name": "AI Book Recommendation Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "book-search",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-start",
      "name": "Webhook - Book Search",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "book-search-webhook"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/books/v1/volumes",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.query }}"
            },
            {
              "name": "key",
              "value": "={{ $credentials.googleBooksApi.apiKey }}"
            },
            {
              "name": "maxResults",
              "value": "20"
            },
            {
              "name": "orderBy",
              "value": "relevance"
            },
            {
              "name": "printType",
              "value": "books"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "google-books-search",
      "name": "Google Books API Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process Google Books API response\nconst items = $input.first().json.items || [];\n\nconst processedBooks = items.map((item, index) => {\n  const volumeInfo = item.volumeInfo || {};\n  const imageLinks = volumeInfo.imageLinks || {};\n  \n  return {\n    id: item.id || `book-${index}`,\n    title: volumeInfo.title || 'Unknown Title',\n    authors: volumeInfo.authors || ['Unknown Author'],\n    description: volumeInfo.description || 'No description available',\n    coverImage: imageLinks.thumbnail || imageLinks.smallThumbnail || 'https://via.placeholder.com/128x192?text=No+Cover',\n    publishedDate: volumeInfo.publishedDate || 'Unknown',\n    pageCount: volumeInfo.pageCount,\n    categories: volumeInfo.categories || [],\n    rating: volumeInfo.averageRating,\n    ratingCount: volumeInfo.ratingsCount,\n    googleBooksUrl: volumeInfo.infoLink || `https://books.google.com/books?id=${item.id}`,\n    isbn: volumeInfo.industryIdentifiers?.[0]?.identifier,\n    // Create embedding text from title and description\n    embeddingText: `${volumeInfo.title || ''} ${volumeInfo.description || ''}`.substring(0, 8000)\n  };\n});\n\nreturn processedBooks.map(book => ({ json: book }));"
      },
      "id": "process-books",
      "name": "Process Books Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "createEmbedding",
        "input": "={{ $json.embeddingText }}",
        "model": "text-embedding-3-small"
      },
      "id": "generate-book-embeddings",
      "name": "Generate Book Embeddings",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "createEmbedding",
        "input": "={{ $('Webhook - Book Search').first().json.query }}",
        "model": "text-embedding-3-small"
      },
      "id": "generate-query-embedding",
      "name": "Generate Query Embedding",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [900, 180]
    },
    {
      "parameters": {
        "jsCode": "// Calculate cosine similarity between query and book embeddings\nconst queryEmbedding = $('Generate Query Embedding').first().json.data[0].embedding;\nconst bookItems = $('Generate Book Embeddings').all();\n\n// Cosine similarity function\nfunction cosineSimilarity(a, b) {\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n  \n  for (let i = 0; i < a.length; i++) {\n    dotProduct += a[i] * b[i];\n    normA += a[i] * a[i];\n    normB += b[i] * b[i];\n  }\n  \n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}\n\n// Calculate similarity for each book\nconst booksWithSimilarity = bookItems.map(item => {\n  const bookEmbedding = item.json.data[0].embedding;\n  const similarity = cosineSimilarity(queryEmbedding, bookEmbedding);\n  \n  // Get original book data from Process Books node\n  const originalBook = $('Process Books').all().find(book => \n    book.json.embeddingText === item.json.input\n  );\n  \n  return {\n    ...originalBook.json,\n    similarityScore: similarity\n  };\n});\n\n// Sort by similarity score (highest first) and take top 10\nconst topBooks = booksWithSimilarity\n  .sort((a, b) => b.similarityScore - a.similarityScore)\n  .slice(0, 10);\n\nreturn topBooks.map(book => ({ json: book }));"
      },
      "id": "calculate-similarity",
      "name": "Calculate Similarity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "resource": "chat",
        "operation": "create",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a knowledgeable book recommendation expert. Generate a brief, personalized recommendation explanation (1-2 sentences) for why this book matches the user's query. Be specific about what makes it a good match."
            },
            {
              "role": "user",
              "content": "User Query: {{ $('Webhook - Book Search').first().json.query }}\n\nBook: {{ $json.title }} by {{ $json.authors.join(', ') }}\nDescription: {{ $json.description.substring(0, 500) }}\nSimilarity Score: {{ ($json.similarityScore * 100).toFixed(1) }}%\n\nWhy is this book a good match for the user's query?"
            }
          ]
        },
        "model": "gpt-3.5-turbo",
        "options": {
          "temperature": 0.7,
          "maxTokens": 100
        }
      },
      "id": "generate-recommendations",
      "name": "Generate AI Recommendations",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Combine book data with AI recommendations\nconst books = $('Calculate Similarity').all();\nconst recommendations = $('Generate AI Recommendations').all();\n\nconst finalResults = books.map((book, index) => {\n  const recommendation = recommendations[index]?.json?.choices?.[0]?.message?.content || 'Great match for your preferences!';\n  \n  return {\n    ...book.json,\n    recommendation: recommendation.trim()\n  };\n});\n\n// Prepare final response\nconst response = {\n  results: finalResults,\n  totalResults: finalResults.length,\n  processingTime: `${((Date.now() - $('Webhook - Book Search').first().json.timestamp) / 1000).toFixed(1)}s`,\n  query: $('Webhook - Book Search').first().json.query\n};\n\nreturn [{ json: response }];"
      },
      "id": "prepare-response",
      "name": "Prepare Final Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 300]
    }
  ],
  "connections": {
    "Webhook - Book Search": {
      "main": [
        [
          {
            "node": "Google Books API Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Books API Search": {
      "main": [
        [
          {
            "node": "Process Books Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Books Data": {
      "main": [
        [
          {
            "node": "Generate Book Embeddings",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Query Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Book Embeddings": {
      "main": [
        [
          {
            "node": "Calculate Similarity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Query Embedding": {
      "main": [
        [
          {
            "node": "Calculate Similarity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Similarity": {
      "main": [
        [
          {
            "node": "Generate AI Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Recommendations": {
      "main": [
        [
          {
            "node": "Prepare Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Final Response": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}